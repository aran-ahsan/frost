- a flexible function to copy data into an address space which is not active (done, needs testing)
- copy the ph-entries from the elf-file to the address-space of the process
- finish elf loading
- some more syscalls
- rpc

- memory management:
	- at the moment, it's pure shit - we can only handle 4KB blocks
	- we _really_ need malloc() and free()
	- implement it similar to James Molloy's implementation
	
	- idea:
		- occupied blocks are handled as in JMs implementation
		- free blocks have to 2 uintegers in them directly after the header:
			- prev_entry
			- next_entry
		- these form a linked list of free blocks
		- in occupied blocks, these fields are INVALID!
		- minimal free block size is header+footer+prev_entry+next_entry
		- unify on kfree() (left and right)
		- list of free blocks should be sorted to find best-fit as early as possible
		

- I had an idea for syscalls:
	1:
		- syscalls are normally done via int 0x62
		- a usermode application can query for an optimized syscall interface
		- if there is none, a zero is returned (or we just map standard int 0x62 code)
		- if there is an optimized method (sysenter, syscall) the kernel maps a read-only page to the userspace containing code to do a syscall
		- the usermode application just uses this code from now on
	2:
		- map the optimized code to a fixed location in userspace
	3:
		- map the optimized code into free userspace
		- pass the address to the application somehow (I think Linux does it that way)
		- maybe push the address to the stack at startup?
		
		- preferred at the moment !